// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  surname    String
  email      String   @unique
  password   String
  cookingHours Float
  newsletter Boolean  @default(false) // Dodane pole dla newslettera
  recipes    Recipe[] @relation("AuthorRecipes")
  reviews    Review[]
  purchasedRecipes Recipe[]  @relation("PurchasedRecipes")
  ingredients Ingredient[]
  cart             Cart?
  orders           Order[]  // Dodane zamówienia
}

model Recipe {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  visible      Boolean @default(true)
  title        String
  description         String
  category    String
  price         Decimal     @db.Decimal(10, 2)
  image        String?
  userId       Int
  author      User     @relation("AuthorRecipes", fields: [userId], references: [id])
  steps        RecipeStep[]
  reviews      Review[]
  purchasers  User[]   @relation("PurchasedRecipes")
  cartItems    CartItem[]  @relation("CartItems")
  orderItems   OrderItem[] // Dodane pozycje zamówień
}

model Review {
  id        Int    @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  recipe    Recipe @relation(fields: [recipeId], references: [id])
  recipeId  Int
  rating    Int
  opinion   String
}

model Ingredient {
  id       Int     @id @default(autoincrement())
  title    String
  unit     String
  category String
  ownerId  Int?
  owner    User?   @relation(fields: [ownerId], references: [id])

  steps RecipeStep[]
}

enum StepType {
  ADD_INGREDIENT
  COOKING
  DESCRIPTION
}

model RecipeStep {
  id               Int       @id @default(autoincrement())
  title            String
  stepType         StepType
  recipeId         Int
  recipe           Recipe    @relation(fields: [recipeId], references: [id])
  
  ingredientId     Int?
  ingredient       Ingredient? @relation(fields: [ingredientId], references: [id])
  amount            Decimal?     @db.Decimal(10, 2)
  
  time             String?
  temperature      Int?
  mixSpeed   Int?
  
  description             String?
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id       Int      @id @default(autoincrement())
  cartId   Int
  cart     Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  recipeId Int
  recipe   Recipe   @relation("CartItems", fields: [recipeId], references: [id], onDelete: Cascade)
  addedAt  DateTime @default(now())
  
  @@unique([cartId, recipeId]) // Jeden przepis raz w koszyku
  @@map("cart_items")
}

// Nowe modele dla zamówień
enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  STRIPE
  MOCK
  PAYPAL  // Dla przyszłych rozszerzeń
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  status          OrderStatus   @default(PENDING)
  total           Decimal       @db.Decimal(10, 2)
  paymentMethod   PaymentMethod
  paymentIntentId String?       // ID z systemu płatności (np. Stripe)
  items           OrderItem[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("orders")
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  orderId  Int
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  recipeId Int
  recipe   Recipe  @relation(fields: [recipeId], references: [id])
  price    Decimal @db.Decimal(10, 2) // Cena w momencie zakupu
  title    String  // Tytuł w momencie zakupu (na wypadek zmiany)
  
  @@unique([orderId, recipeId]) // Jeden przepis raz w zamówieniu
  @@map("order_items")
}